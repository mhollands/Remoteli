
Remoteli_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000654  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000137  00800100  00800100  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b28  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000627  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000641  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036e  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e0  00000000  00000000  0000264a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_2>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_7>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_9>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	22 e0       	ldi	r18, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a7 33       	cpi	r26, 0x37	; 55
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  90:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <delay_one_ms>:
		delay_one_ms();
	}
}

void delay_one_ms()
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t x = 150;
  a2:	86 e9       	ldi	r24, 0x96	; 150
  a4:	89 83       	std	Y+1, r24	; 0x01
	while(--x)
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	88 23       	and	r24, r24
  ae:	31 f0       	breq	.+12     	; 0xbc <delay_one_ms+0x24>
	{
		asm ("NOP");
  b0:	00 00       	nop
}

void delay_one_ms()
{
	volatile uint8_t x = 150;
	while(--x)
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	81 11       	cpse	r24, r1
  ba:	fa cf       	rjmp	.-12     	; 0xb0 <delay_one_ms+0x18>
	{
		asm ("NOP");
	}
}
  bc:	0f 90       	pop	r0
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <my_delay>:
#include "header.h"

void delay_one_ms();

void my_delay(uint16_t milliseconds)
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	for(uint16_t x = 0; x < milliseconds; x++)
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	49 f0       	breq	.+18     	; 0xe2 <my_delay+0x1e>
  d0:	8c 01       	movw	r16, r24
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_one_ms();
  d6:	0e 94 4c 00 	call	0x98	; 0x98 <delay_one_ms>

void delay_one_ms();

void my_delay(uint16_t milliseconds)
{
	for(uint16_t x = 0; x < milliseconds; x++)
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	c0 17       	cp	r28, r16
  de:	d1 07       	cpc	r29, r17
  e0:	d1 f7       	brne	.-12     	; 0xd6 <my_delay+0x12>
	{
		delay_one_ms();
	}
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <boot_program_4pages>:

uint16_t pulses_in[150];

//a memory location is 8 pages. one page is 16 words. one word is 2 bytes. one byte is 8 bits.
void boot_program_4pages(uint32_t memoryLocation, uint16_t *buf)
{
  ec:	9f 92       	push	r9
  ee:	af 92       	push	r10
  f0:	bf 92       	push	r11
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ea 01       	movw	r28, r20
	uint32_t page = memoryLocation * 256;
 104:	b8 2f       	mov	r27, r24
 106:	a7 2f       	mov	r26, r23
 108:	96 2f       	mov	r25, r22
 10a:	88 27       	eor	r24, r24
	uint16_t i;
	uint8_t sreg;
	// Disable interrupts.
	sreg = SREG;
 10c:	9f b6       	in	r9, 0x3f	; 63
	cli();
 10e:	f8 94       	cli
	eeprom_busy_wait ();
 110:	e1 99       	sbic	0x1c, 1	; 28
 112:	fe cf       	rjmp	.-4      	; 0x110 <boot_program_4pages+0x24>
	boot_page_erase (page); //erase 4 pages
 114:	b8 2e       	mov	r11, r24
 116:	c9 2e       	mov	r12, r25
 118:	23 e0       	ldi	r18, 0x03	; 3
 11a:	fc 01       	movw	r30, r24
 11c:	20 93 57 00 	sts	0x0057, r18
 120:	e8 95       	spm
	boot_spm_busy_wait (); // Wait until the memory is erased.
 122:	07 b6       	in	r0, 0x37	; 55
 124:	00 fc       	sbrc	r0, 0
 126:	fd cf       	rjmp	.-6      	; 0x122 <boot_program_4pages+0x36>
	eeprom_busy_wait ();
 128:	e1 99       	sbic	0x1c, 1	; 28
 12a:	fe cf       	rjmp	.-4      	; 0x128 <boot_program_4pages+0x3c>
	boot_page_erase (page + 128); //erase 4 pages
 12c:	23 e0       	ldi	r18, 0x03	; 3
 12e:	fc 01       	movw	r30, r24
 130:	e0 58       	subi	r30, 0x80	; 128
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	20 93 57 00 	sts	0x0057, r18
 138:	e8 95       	spm
	boot_spm_busy_wait (); // Wait until the memory is erased.
 13a:	07 b6       	in	r0, 0x37	; 55
 13c:	00 fc       	sbrc	r0, 0
 13e:	fd cf       	rjmp	.-6      	; 0x13a <boot_program_4pages+0x4e>
 140:	7e 01       	movw	r14, r28
 142:	f3 94       	inc	r15
 144:	8c 01       	movw	r16, r24
		for (i=0; i<SPM_PAGESIZE; i+=2)
		{
			// Set up little-endian word.
			uint16_t w = *buf++;
			//w += (*buf++) << 8;
			boot_page_fill (page + i, w);
 146:	dd 24       	eor	r13, r13
 148:	d3 94       	inc	r13
		}
		boot_page_write (page + x * SPM_PAGESIZE); // Store buffer in flash page.
 14a:	0f 2e       	mov	r0, r31
 14c:	f5 e0       	ldi	r31, 0x05	; 5
 14e:	af 2e       	mov	r10, r31
 150:	f0 2d       	mov	r31, r0
 152:	1b c0       	rjmp	.+54     	; 0x18a <boot_program_4pages+0x9e>
	for(int x = 0; x < 8; x++)
	{
		for (i=0; i<SPM_PAGESIZE; i+=2)
		{
			// Set up little-endian word.
			uint16_t w = *buf++;
 154:	8d 91       	ld	r24, X+
 156:	9d 91       	ld	r25, X+
			//w += (*buf++) << 8;
			boot_page_fill (page + i, w);
 158:	0c 01       	movw	r0, r24
 15a:	d0 92 57 00 	sts	0x0057, r13
 15e:	e8 95       	spm
 160:	11 24       	eor	r1, r1
 162:	32 96       	adiw	r30, 0x02	; 2
	eeprom_busy_wait ();
	boot_page_erase (page + 128); //erase 4 pages
	boot_spm_busy_wait (); // Wait until the memory is erased.
	for(int x = 0; x < 8; x++)
	{
		for (i=0; i<SPM_PAGESIZE; i+=2)
 164:	a2 17       	cp	r26, r18
 166:	b3 07       	cpc	r27, r19
 168:	a9 f7       	brne	.-22     	; 0x154 <boot_program_4pages+0x68>
			// Set up little-endian word.
			uint16_t w = *buf++;
			//w += (*buf++) << 8;
			boot_page_fill (page + i, w);
		}
		boot_page_write (page + x * SPM_PAGESIZE); // Store buffer in flash page.
 16a:	f8 01       	movw	r30, r16
 16c:	a0 92 57 00 	sts	0x0057, r10
 170:	e8 95       	spm
		boot_spm_busy_wait(); // Wait until the memory is written.
 172:	07 b6       	in	r0, 0x37	; 55
 174:	00 fc       	sbrc	r0, 0
 176:	fd cf       	rjmp	.-6      	; 0x172 <boot_program_4pages+0x86>
		my_delay(100);
 178:	84 e6       	ldi	r24, 0x64	; 100
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 62 00 	call	0xc4	; 0xc4 <my_delay>
 180:	00 5e       	subi	r16, 0xE0	; 224
 182:	1f 4f       	sbci	r17, 0xFF	; 255
	boot_page_erase (page); //erase 4 pages
	boot_spm_busy_wait (); // Wait until the memory is erased.
	eeprom_busy_wait ();
	boot_page_erase (page + 128); //erase 4 pages
	boot_spm_busy_wait (); // Wait until the memory is erased.
	for(int x = 0; x < 8; x++)
 184:	ce 15       	cp	r28, r14
 186:	df 05       	cpc	r29, r15
 188:	31 f0       	breq	.+12     	; 0x196 <boot_program_4pages+0xaa>
 18a:	de 01       	movw	r26, r28
 18c:	a0 96       	adiw	r28, 0x20	; 32
 18e:	9e 01       	movw	r18, r28

uint16_t pulses_in[150];

//a memory location is 8 pages. one page is 16 words. one word is 2 bytes. one byte is 8 bits.
void boot_program_4pages(uint32_t memoryLocation, uint16_t *buf)
{
 190:	eb 2d       	mov	r30, r11
 192:	fc 2d       	mov	r31, r12
 194:	df cf       	rjmp	.-66     	; 0x154 <boot_program_4pages+0x68>

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.
	//boot_rww_enable ();
	// Re-enable interrupts (if they were ever enabled).
	SREG = sreg;
 196:	9f be       	out	0x3f, r9	; 63
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	af 90       	pop	r10
 1ac:	9f 90       	pop	r9
 1ae:	08 95       	ret

000001b0 <boot_read_4pages>:

uint16_t* boot_read_4pages(uint32_t memoryLocation)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	uint32_t page = memoryLocation;
	uint8_t sreg;
	// Disable interrupts.
	sreg = SREG;
 1b4:	2f b7       	in	r18, 0x3f	; 63
	//cli();
	eeprom_busy_wait ();
 1b6:	e1 99       	sbic	0x1c, 1	; 28
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <boot_read_4pages+0x6>
	uint16_t i;
	uint16_t mybyte;
	for (i=0; i<SPM_PAGESIZE*4; i+=1) {
		//mybyte = pgm_read_byte((void *)(i+ page*SPM_PAGESIZE));
		mybyte = pgm_read_word((void *)((i*2) +page*SPM_PAGESIZE));
 1ba:	ab 01       	movw	r20, r22
 1bc:	bc 01       	movw	r22, r24
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	66 1f       	adc	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	66 1f       	adc	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	66 1f       	adc	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	66 1f       	adc	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	66 1f       	adc	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	c9 e0       	ldi	r28, 0x09	; 9
 1e8:	d2 e0       	ldi	r29, 0x02	; 2
 1ea:	a9 e0       	ldi	r26, 0x09	; 9
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	49 50       	subi	r20, 0x09	; 9
 1f0:	51 40       	sbci	r21, 0x01	; 1
 1f2:	fa 01       	movw	r30, r20
 1f4:	ea 0f       	add	r30, r26
 1f6:	fb 1f       	adc	r31, r27
 1f8:	85 91       	lpm	r24, Z+
 1fa:	94 91       	lpm	r25, Z
		pulses_in[i] = mybyte;
 1fc:	8d 93       	st	X+, r24
 1fe:	9d 93       	st	X+, r25
	sreg = SREG;
	//cli();
	eeprom_busy_wait ();
	uint16_t i;
	uint16_t mybyte;
	for (i=0; i<SPM_PAGESIZE*4; i+=1) {
 200:	ac 17       	cp	r26, r28
 202:	bd 07       	cpc	r27, r29
 204:	b1 f7       	brne	.-20     	; 0x1f2 <boot_read_4pages+0x42>
		//mybyte = pgm_read_byte((void *)(i+ page*SPM_PAGESIZE));
		mybyte = pgm_read_word((void *)((i*2) +page*SPM_PAGESIZE));
		pulses_in[i] = mybyte;
	}
	SREG = sreg;
 206:	2f bf       	out	0x3f, r18	; 63
	return pulses_in;
 208:	89 e0       	ldi	r24, 0x09	; 9
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <keyPressed>:
	//*(PA2) *(PC4)
	//*(PA3)*(PB1)*(PC1)
	//*(PA7)*(PA1)!(PB3)
	//*(PB0)*(PC5)*(PB2)7
	
	if((PINA & 0b00000100) == 0) { return 1; }
 212:	7a 9b       	sbis	0x0f, 2	; 15
 214:	1c c0       	rjmp	.+56     	; 0x24e <keyPressed+0x3c>
	if((PINC & 0b00010000) == 0) { return 2; }
 216:	3c 9b       	sbis	0x07, 4	; 7
 218:	1c c0       	rjmp	.+56     	; 0x252 <keyPressed+0x40>
	if((PINA & 0b00001000) == 0) { return 3; }		
 21a:	7b 9b       	sbis	0x0f, 3	; 15
 21c:	1c c0       	rjmp	.+56     	; 0x256 <keyPressed+0x44>
	if((PINB & 0b00000010) == 0) { return 4; }		
 21e:	59 9b       	sbis	0x0b, 1	; 11
 220:	1c c0       	rjmp	.+56     	; 0x25a <keyPressed+0x48>
	if((PINC & 0b00000010) == 0) { return 5; }		
 222:	39 9b       	sbis	0x07, 1	; 7
 224:	1c c0       	rjmp	.+56     	; 0x25e <keyPressed+0x4c>
	if((PINA & 0b10000000) == 0) { return 6; }		
 226:	7f 9b       	sbis	0x0f, 7	; 15
 228:	1c c0       	rjmp	.+56     	; 0x262 <keyPressed+0x50>
	if((PINA & 0b00000010) == 0) { return 7; }		
 22a:	79 9b       	sbis	0x0f, 1	; 15
 22c:	1c c0       	rjmp	.+56     	; 0x266 <keyPressed+0x54>
	if((PINB & 0b00001000) == 0) { return 8; }		
 22e:	5b 9b       	sbis	0x0b, 3	; 11
 230:	1c c0       	rjmp	.+56     	; 0x26a <keyPressed+0x58>
	if((PINB & 0b00000001) == 0 && watchDog == 1) { return 9; }		
 232:	58 99       	sbic	0x0b, 0	; 11
 234:	06 c0       	rjmp	.+12     	; 0x242 <keyPressed+0x30>
 236:	80 91 07 01 	lds	r24, 0x0107
 23a:	90 91 08 01 	lds	r25, 0x0108
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	b1 f0       	breq	.+44     	; 0x26e <keyPressed+0x5c>
	if((PINC & 0b00100000) == 0) { return 10; }		
 242:	3d 9b       	sbis	0x07, 5	; 7
 244:	16 c0       	rjmp	.+44     	; 0x272 <keyPressed+0x60>
	if((PINB & 0b00000100) == 0) { return 11; }		
 246:	5a 9b       	sbis	0x0b, 2	; 11
 248:	16 c0       	rjmp	.+44     	; 0x276 <keyPressed+0x64>
	
	return 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
	//*(PA2) *(PC4)
	//*(PA3)*(PB1)*(PC1)
	//*(PA7)*(PA1)!(PB3)
	//*(PB0)*(PC5)*(PB2)7
	
	if((PINA & 0b00000100) == 0) { return 1; }
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret
	if((PINC & 0b00010000) == 0) { return 2; }
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	08 95       	ret
	if((PINA & 0b00001000) == 0) { return 3; }		
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	08 95       	ret
	if((PINB & 0b00000010) == 0) { return 4; }		
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	08 95       	ret
	if((PINC & 0b00000010) == 0) { return 5; }		
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	08 95       	ret
	if((PINA & 0b10000000) == 0) { return 6; }		
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	08 95       	ret
	if((PINA & 0b00000010) == 0) { return 7; }		
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	08 95       	ret
	if((PINB & 0b00001000) == 0) { return 8; }		
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	08 95       	ret
	if((PINB & 0b00000001) == 0 && watchDog == 1) { return 9; }		
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	08 95       	ret
	if((PINC & 0b00100000) == 0) { return 10; }		
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	08 95       	ret
	if((PINB & 0b00000100) == 0) { return 11; }		
 276:	8b e0       	ldi	r24, 0x0B	; 11
	
	return 0;
}
 278:	08 95       	ret

0000027a <keyPressedS>:
 */ 

#include "header.h"

char keyPressedS()
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	c4 e6       	ldi	r28, 0x64	; 100
 280:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x = 0; x < 100; x++)
	{
		char k = keyPressed();
 282:	0e 94 09 01 	call	0x212	; 0x212 <keyPressed>
		if(k != 0)
 286:	81 11       	cpse	r24, r1
 288:	02 c0       	rjmp	.+4      	; 0x28e <keyPressedS+0x14>
 28a:	21 97       	sbiw	r28, 0x01	; 1

#include "header.h"

char keyPressedS()
{
	for(int x = 0; x < 100; x++)
 28c:	d1 f7       	brne	.-12     	; 0x282 <keyPressedS+0x8>
		{
			return k;
		}
	}
	return 0;
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <fastFlash>:

void fastFlash()
{
	for(int x = 0; x < 2; x++)
	{
		PORTC |= 0b00000001;
 294:	48 9a       	sbi	0x09, 0	; 9
		my_delay(100);
 296:	84 e6       	ldi	r24, 0x64	; 100
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 62 00 	call	0xc4	; 0xc4 <my_delay>
		PORTC &= 0b11111110;
 29e:	48 98       	cbi	0x09, 0	; 9
		my_delay(100);
 2a0:	84 e6       	ldi	r24, 0x64	; 100
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 62 00 	call	0xc4	; 0xc4 <my_delay>

void fastFlash()
{
	for(int x = 0; x < 2; x++)
	{
		PORTC |= 0b00000001;
 2a8:	48 9a       	sbi	0x09, 0	; 9
		my_delay(100);
 2aa:	84 e6       	ldi	r24, 0x64	; 100
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 62 00 	call	0xc4	; 0xc4 <my_delay>
		PORTC &= 0b11111110;
 2b2:	48 98       	cbi	0x09, 0	; 9
		my_delay(100);
 2b4:	84 e6       	ldi	r24, 0x64	; 100
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 62 00 	call	0xc4	; 0xc4 <my_delay>
 2bc:	08 95       	ret

000002be <doRead>:
	}
}

void doRead(char button)
{
 2be:	cf 93       	push	r28
	if(button > 0 && button <= 11) //if the button number is valid
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
 2c2:	98 0f       	add	r25, r24
 2c4:	9b 30       	cpi	r25, 0x0B	; 11
 2c6:	b0 f4       	brcc	.+44     	; 0x2f4 <doRead+0x36>
 2c8:	c8 2f       	mov	r28, r24
	{
		initialisePulseRead(); //initialise timers etc
 2ca:	0e 94 c4 01 	call	0x388	; 0x388 <initialisePulseRead>
		while(!isPulseReadCompleted()){} //wait for read to be done
 2ce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <isPulseReadCompleted>
 2d2:	89 2b       	or	r24, r25
 2d4:	e1 f3       	breq	.-8      	; 0x2ce <doRead+0x10>
		uint16_t* pulses = uninitialisePulseRead(); //get pules and uninitialise timers
 2d6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <uninitialisePulseRead>
 2da:	ac 01       	movw	r20, r24
		boot_program_4pages(6 + button, pulses);// save pulses
 2dc:	6c 2f       	mov	r22, r28
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	6a 5f       	subi	r22, 0xFA	; 250
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	07 2e       	mov	r0, r23
 2e6:	00 0c       	add	r0, r0
 2e8:	88 0b       	sbc	r24, r24
 2ea:	99 0b       	sbc	r25, r25
 2ec:	0e 94 76 00 	call	0xec	; 0xec <boot_program_4pages>
		fastFlash();	
 2f0:	0e 94 4a 01 	call	0x294	; 0x294 <fastFlash>
	}
}
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <doSend>:

void doSend(char code)
{
	uint16_t* pulses = boot_read_4pages((6 + code) * 8);
 2f8:	68 2f       	mov	r22, r24
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	6a 5f       	subi	r22, 0xFA	; 250
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	07 2e       	mov	r0, r23
 30e:	00 0c       	add	r0, r0
 310:	88 0b       	sbc	r24, r24
 312:	99 0b       	sbc	r25, r25
 314:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <boot_read_4pages>
	initialisePulseWrite(pulses);
 318:	0e 94 82 02 	call	0x504	; 0x504 <initialisePulseWrite>
	startPulseWrite();
 31c:	0e 94 b6 02 	call	0x56c	; 0x56c <startPulseWrite>
	while(!isPulseWriteCompleted()){} //wait for write to be done
 320:	0e 94 de 02 	call	0x5bc	; 0x5bc <isPulseWriteCompleted>
 324:	89 2b       	or	r24, r25
 326:	e1 f3       	breq	.-8      	; 0x320 <doSend+0x28>
	uninitialisePulseWrite();
 328:	0e 94 9c 02 	call	0x538	; 0x538 <uninitialisePulseWrite>
	my_delay(100);
 32c:	84 e6       	ldi	r24, 0x64	; 100
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 62 00 	call	0xc4	; 0xc4 <my_delay>
 334:	08 95       	ret

00000336 <main>:
void doRead(char button);

/* Replace with your library code */
int main(void)
{
	sei(); //enable global interrupts
 336:	78 94       	sei
	WDTCSR |= (1 << WDIE); //enable watchdog so PB3 works!
 338:	80 b7       	in	r24, 0x30	; 48
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	80 bf       	out	0x30, r24	; 48
	WDTCSR |= (1 << WDP3) | (0 << WDP2) | (0 << WDP1) | (1 << WDP0); //set watchdog to be slow
 33e:	80 b7       	in	r24, 0x30	; 48
 340:	81 62       	ori	r24, 0x21	; 33
 342:	80 bf       	out	0x30, r24	; 48
	watchDog = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 08 01 	sts	0x0108, r25
 34c:	80 93 07 01 	sts	0x0107, r24
	DDRA = 0b01000000; // set all port a as inputs
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	80 bb       	out	0x10, r24	; 16
	DDRB = 0b00000000; // set all port b as inputs
 354:	1c b8       	out	0x0c, r1	; 12
	DDRC = 0b00000001; //set all inputs on PORTC except 0 for the LED
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	98 b9       	out	0x08, r25	; 8
	PUEB = 0b00001111; //set all pullup resistors on portb
 35a:	9f e0       	ldi	r25, 0x0F	; 15
 35c:	9e b9       	out	0x0e, r25	; 14
	PUEA = 0b10011111; //set all pullup resistors on porta except those for the IR receiver
 35e:	9f e9       	ldi	r25, 0x9F	; 159
 360:	92 bb       	out	0x12, r25	; 18
	PUEC = 0b11111110; //set all pullup resistors on portc except for the led
 362:	9e ef       	ldi	r25, 0xFE	; 254
 364:	9a b9       	out	0x0a, r25	; 10
	
	PORTA = 0b01000000; //turn on IR receiver
 366:	81 bb       	out	0x11, r24	; 17
	my_delay(1000);
 368:	88 ee       	ldi	r24, 0xE8	; 232
 36a:	93 e0       	ldi	r25, 0x03	; 3
 36c:	0e 94 62 00 	call	0xc4	; 0xc4 <my_delay>
	doRead(keyPressedS()); //if a button is pressed read command save in correct location
 370:	0e 94 3d 01 	call	0x27a	; 0x27a <keyPressedS>
 374:	0e 94 5f 01 	call	0x2be	; 0x2be <doRead>
	
	char key = 0;
	while(1 == 1)
	{
		key = keyPressedS();
 378:	0e 94 3d 01 	call	0x27a	; 0x27a <keyPressedS>
		if(key != 0)
 37c:	88 23       	and	r24, r24
 37e:	e1 f3       	breq	.-8      	; 0x378 <main+0x42>
		{
			doSend(key);
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <doSend>
 386:	f8 cf       	rjmp	.-16     	; 0x378 <main+0x42>

00000388 <initialisePulseRead>:
int count = 0;
char complete = 0;

void initialisePulseRead()
{
	WDTCSR &= ~(1 << WDIE); //disable watchdog
 388:	80 b7       	in	r24, 0x30	; 48
 38a:	8f 7b       	andi	r24, 0xBF	; 191
 38c:	80 bf       	out	0x30, r24	; 48
	watchDog = 0;
 38e:	10 92 08 01 	sts	0x0108, r1
 392:	10 92 07 01 	sts	0x0107, r1
	begun = 0;
 396:	10 92 03 01 	sts	0x0103, r1
	count = 0;
 39a:	10 92 02 01 	sts	0x0102, r1
 39e:	10 92 01 01 	sts	0x0101, r1
	complete = 0;
 3a2:	10 92 00 01 	sts	0x0100, r1
	
	TIFR |= (1 << TOV1); //clear overflow interrupt flag
 3a6:	89 b7       	in	r24, 0x39	; 57
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	89 bf       	out	0x39, r24	; 57
	TIMSK |= (1 << TOIE1); // enable overflow interrupt
 3ac:	8a b7       	in	r24, 0x3a	; 58
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	8a bf       	out	0x3a, r24	; 58
	GIFR |= (1 << PCIF0); //clear interrupt flag
 3b2:	8b b7       	in	r24, 0x3b	; 59
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 |= (1 << PCINT5); // enable PCINT5
 3b8:	87 b5       	in	r24, 0x27	; 39
 3ba:	80 62       	ori	r24, 0x20	; 32
 3bc:	87 bd       	out	0x27, r24	; 39
	GIMSK |= (1 << PCIE0); // enable Pin change interrupt 0
 3be:	8c b7       	in	r24, 0x3c	; 60
 3c0:	88 60       	ori	r24, 0x08	; 8
 3c2:	8c bf       	out	0x3c, r24	; 60
 3c4:	08 95       	ret

000003c6 <isPulseReadCompleted>:
}

int isPulseReadCompleted()
{
	return (complete == 1);	
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	20 91 00 01 	lds	r18, 0x0100
 3ce:	21 30       	cpi	r18, 0x01	; 1
 3d0:	11 f0       	breq	.+4      	; 0x3d6 <isPulseReadCompleted+0x10>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
}
 3d6:	08 95       	ret

000003d8 <uninitialisePulseRead>:

uint16_t* uninitialisePulseRead()
{
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // stop clock
 3d8:	e1 e7       	ldi	r30, 0x71	; 113
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	88 7f       	andi	r24, 0xF8	; 248
 3e0:	80 83       	st	Z, r24
	TIMSK &= ~(1 << TOIE1); // disable overflow interrupt
 3e2:	8a b7       	in	r24, 0x3a	; 58
 3e4:	8f 77       	andi	r24, 0x7F	; 127
 3e6:	8a bf       	out	0x3a, r24	; 58
	PCMSK0 &= ~(1 << PCINT5); // disable PCINT5
 3e8:	87 b5       	in	r24, 0x27	; 39
 3ea:	8f 7d       	andi	r24, 0xDF	; 223
 3ec:	87 bd       	out	0x27, r24	; 39
	GIMSK &= ~(1 << PCIE0); // disable Pin change interrupt 0
 3ee:	8c b7       	in	r24, 0x3c	; 60
 3f0:	87 7f       	andi	r24, 0xF7	; 247
 3f2:	8c bf       	out	0x3c, r24	; 60
	TCNT1 = 0; //reset timer counter
 3f4:	10 92 6f 00 	sts	0x006F, r1
 3f8:	10 92 6e 00 	sts	0x006E, r1
	WDTCSR |= (1 << WDIE); //enable watchdog!
 3fc:	80 b7       	in	r24, 0x30	; 48
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	80 bf       	out	0x30, r24	; 48
	watchDog = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 08 01 	sts	0x0108, r25
 40a:	80 93 07 01 	sts	0x0107, r24
	return pulses_in;
}
 40e:	89 e0       	ldi	r24, 0x09	; 9
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	08 95       	ret

00000414 <__vector_2>:

ISR(PCINT0_vect)
{
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
	if(begun == 0)
 42a:	80 91 03 01 	lds	r24, 0x0103
 42e:	81 11       	cpse	r24, r1
 430:	11 c0       	rjmp	.+34     	; 0x454 <__vector_2+0x40>
	{
		begun = 1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 03 01 	sts	0x0103, r24
		count = 0;
 438:	10 92 02 01 	sts	0x0102, r1
 43c:	10 92 01 01 	sts	0x0101, r1
		TCNT1 = 0;
 440:	10 92 6f 00 	sts	0x006F, r1
 444:	10 92 6e 00 	sts	0x006E, r1
		TCCR1B |= (0 << CS12) | (0 << CS11) | (1 << CS10); // set clock prescaler
 448:	e1 e7       	ldi	r30, 0x71	; 113
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	80 83       	st	Z, r24
		
		return;
 452:	1b c0       	rjmp	.+54     	; 0x48a <__vector_2+0x76>
	}
	
	pulses_in[count] = TCNT1;
 454:	ae e6       	ldi	r26, 0x6E	; 110
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	8d 91       	ld	r24, X+
 45a:	9c 91       	ld	r25, X
 45c:	11 97       	sbiw	r26, 0x01	; 1
 45e:	e0 91 01 01 	lds	r30, 0x0101
 462:	f0 91 02 01 	lds	r31, 0x0102
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e7 5f       	subi	r30, 0xF7	; 247
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	91 83       	std	Z+1, r25	; 0x01
 470:	80 83       	st	Z, r24
	TCNT1 = 0;
 472:	11 96       	adiw	r26, 0x01	; 1
 474:	1c 92       	st	X, r1
 476:	1e 92       	st	-X, r1
	count++;
 478:	80 91 01 01 	lds	r24, 0x0101
 47c:	90 91 02 01 	lds	r25, 0x0102
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	90 93 02 01 	sts	0x0102, r25
 486:	80 93 01 01 	sts	0x0101, r24
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__vector_9>:

ISR(TIM1_OVF_vect)
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	ef 93       	push	r30
 4b0:	ff 93       	push	r31
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // stop clock
 4b2:	e1 e7       	ldi	r30, 0x71	; 113
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	88 7f       	andi	r24, 0xF8	; 248
 4ba:	80 83       	st	Z, r24
	
	for(int x = count; x < 150; x++)
 4bc:	e0 91 01 01 	lds	r30, 0x0101
 4c0:	f0 91 02 01 	lds	r31, 0x0102
 4c4:	e6 39       	cpi	r30, 0x96	; 150
 4c6:	f1 05       	cpc	r31, r1
 4c8:	5c f4       	brge	.+22     	; 0x4e0 <__vector_9+0x40>
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e7 5f       	subi	r30, 0xF7	; 247
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	85 e3       	ldi	r24, 0x35	; 53
 4d4:	92 e0       	ldi	r25, 0x02	; 2
	{
		pulses_in[x] = 0;
 4d6:	11 92       	st	Z+, r1
 4d8:	11 92       	st	Z+, r1

ISR(TIM1_OVF_vect)
{
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // stop clock
	
	for(int x = count; x < 150; x++)
 4da:	e8 17       	cp	r30, r24
 4dc:	f9 07       	cpc	r31, r25
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__vector_9+0x36>
	{
		pulses_in[x] = 0;
	}
	begun = 0;
 4e0:	10 92 03 01 	sts	0x0103, r1
	count = 0;
 4e4:	10 92 02 01 	sts	0x0102, r1
 4e8:	10 92 01 01 	sts	0x0101, r1
	complete = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 00 01 	sts	0x0100, r24
}
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <initialisePulseWrite>:
uint16_t* pulses_out;
char completed = 0;

void initialisePulseWrite(uint16_t *pulses)
{	
	completed = 0;
 504:	10 92 04 01 	sts	0x0104, r1
	pulses_out = pulses;
 508:	90 93 36 02 	sts	0x0236, r25
 50c:	80 93 35 02 	sts	0x0235, r24
	//SET UP CARRIER CLOCK
	OCR0A = 12;
 510:	8c e0       	ldi	r24, 0x0C	; 12
 512:	88 bb       	out	0x18, r24	; 24
	TCCR0A |= (1 << WGM01); //enable CTC mode
 514:	d9 9a       	sbi	0x1b, 1	; 27

	//SET UP DATA CLOCK
	TIFR |= (1 << OCF1A); //clear output compare interrupt flag
 516:	89 b7       	in	r24, 0x39	; 57
 518:	80 64       	ori	r24, 0x40	; 64
 51a:	89 bf       	out	0x39, r24	; 57
	TIMSK |= (1 << OCIE1A); // enable timer compare interrupt
 51c:	8a b7       	in	r24, 0x3a	; 58
 51e:	80 64       	ori	r24, 0x40	; 64
 520:	8a bf       	out	0x3a, r24	; 58
	TCCR1B |= (1 << WGM12); //enable CTC mode
 522:	e1 e7       	ldi	r30, 0x71	; 113
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	88 60       	ori	r24, 0x08	; 8
 52a:	80 83       	st	Z, r24
	TCCR1A &= ~((1 << WGM11) | (1 << WGM10)); //enable CTC mode
 52c:	e2 e7       	ldi	r30, 0x72	; 114
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	8c 7f       	andi	r24, 0xFC	; 252
 534:	80 83       	st	Z, r24
 536:	08 95       	ret

00000538 <uninitialisePulseWrite>:
	return (completed == 1);
}

void inline stopPulseWrite()
{
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // stop data clock
 538:	e1 e7       	ldi	r30, 0x71	; 113
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	88 7f       	andi	r24, 0xF8	; 248
 540:	80 83       	st	Z, r24
	TCCR0A &= ~(1 << COM0A0); //disconnect from pin
 542:	de 98       	cbi	0x1b, 6	; 27
	TCCR0B &= ~(1 << CS00); //stop carrier clock
 544:	d0 98       	cbi	0x1a, 0	; 26
	completed = 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	80 93 04 01 	sts	0x0104, r24
}

void uninitialisePulseWrite()
{
	stopPulseWrite();
	TIMSK &= ~(1 << OCIE1A); // disable timer compare interrupt
 54c:	8a b7       	in	r24, 0x3a	; 58
 54e:	8f 7b       	andi	r24, 0xBF	; 191
 550:	8a bf       	out	0x3a, r24	; 58
	TCCR1B &= ~(1 << WGM12); //enable Normal mode
 552:	80 81       	ld	r24, Z
 554:	87 7f       	andi	r24, 0xF7	; 247
 556:	80 83       	st	Z, r24
	TCCR1A &= ~((1 << WGM11) | (1 << WGM10)); //enable Normal mode
 558:	e2 e7       	ldi	r30, 0x72	; 114
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	8c 7f       	andi	r24, 0xFC	; 252
 560:	80 83       	st	Z, r24
	TCNT1 = 0;
 562:	10 92 6f 00 	sts	0x006F, r1
 566:	10 92 6e 00 	sts	0x006E, r1
 56a:	08 95       	ret

0000056c <startPulseWrite>:
}

void startPulseWrite()
{
	pulsePosition = 0;
 56c:	10 92 06 01 	sts	0x0106, r1
 570:	10 92 05 01 	sts	0x0105, r1
	TCNT1 = 0;
 574:	10 92 6f 00 	sts	0x006F, r1
 578:	10 92 6e 00 	sts	0x006E, r1
	completed = 1;
}

void inline setPulseLength()
{
	OCR1A = pulses_out[pulsePosition]; // set timer TOP
 57c:	e0 91 05 01 	lds	r30, 0x0105
 580:	f0 91 06 01 	lds	r31, 0x0106
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	80 91 35 02 	lds	r24, 0x0235
 58c:	90 91 36 02 	lds	r25, 0x0236
 590:	e8 0f       	add	r30, r24
 592:	f9 1f       	adc	r31, r25
 594:	80 81       	ld	r24, Z
 596:	91 81       	ldd	r25, Z+1	; 0x01
 598:	90 93 6d 00 	sts	0x006D, r25
 59c:	80 93 6c 00 	sts	0x006C, r24
}

void inline togglePulse()
{
	TCCR0A ^= (1 << COM0A0); //toggle connection to pin
 5a0:	9b b3       	in	r25, 0x1b	; 27
 5a2:	80 e4       	ldi	r24, 0x40	; 64
 5a4:	89 27       	eor	r24, r25
 5a6:	8b bb       	out	0x1b, r24	; 27
	TCCR0B ^= (1 << CS00); //toggle carrier clock
 5a8:	9a b3       	in	r25, 0x1a	; 26
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	89 27       	eor	r24, r25
 5ae:	8a bb       	out	0x1a, r24	; 26
{
	pulsePosition = 0;
	TCNT1 = 0;
	setPulseLength();
	togglePulse();
	TCCR1B |= (0 << CS12) | (0 << CS11) | (1 << CS10); // set clock prescaler
 5b0:	e1 e7       	ldi	r30, 0x71	; 113
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	80 83       	st	Z, r24
 5ba:	08 95       	ret

000005bc <isPulseWriteCompleted>:
}

int isPulseWriteCompleted()
{
	return (completed == 1);
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	20 91 04 01 	lds	r18, 0x0104
 5c4:	21 30       	cpi	r18, 0x01	; 1
 5c6:	11 f0       	breq	.+4      	; 0x5cc <isPulseWriteCompleted+0x10>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
}
 5cc:	08 95       	ret

000005ce <__vector_7>:
	TCCR0A ^= (1 << COM0A0); //toggle connection to pin
	TCCR0B ^= (1 << CS00); //toggle carrier clock
}

ISR(TIM1_COMPA_vect)
{
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
	OCR1A = pulses_out[pulsePosition]; // set timer TOP
}

void inline togglePulse()
{
	TCCR0A ^= (1 << COM0A0); //toggle connection to pin
 5e0:	9b b3       	in	r25, 0x1b	; 27
 5e2:	80 e4       	ldi	r24, 0x40	; 64
 5e4:	89 27       	eor	r24, r25
 5e6:	8b bb       	out	0x1b, r24	; 27
	TCCR0B ^= (1 << CS00); //toggle carrier clock
 5e8:	9a b3       	in	r25, 0x1a	; 26
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	89 27       	eor	r24, r25
 5ee:	8a bb       	out	0x1a, r24	; 26
}

ISR(TIM1_COMPA_vect)
{
	togglePulse();
	pulsePosition++;
 5f0:	80 91 05 01 	lds	r24, 0x0105
 5f4:	90 91 06 01 	lds	r25, 0x0106
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	90 93 06 01 	sts	0x0106, r25
 5fe:	80 93 05 01 	sts	0x0105, r24
	//TCNT1 = 0;
	if(pulsePosition == 128 || pulses_out[pulsePosition] == 0)
 602:	80 38       	cpi	r24, 0x80	; 128
 604:	91 05       	cpc	r25, r1
 606:	61 f0       	breq	.+24     	; 0x620 <__vector_7+0x52>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	e0 91 35 02 	lds	r30, 0x0235
 610:	f0 91 36 02 	lds	r31, 0x0236
 614:	e8 0f       	add	r30, r24
 616:	f9 1f       	adc	r31, r25
 618:	80 81       	ld	r24, Z
 61a:	91 81       	ldd	r25, Z+1	; 0x01
 61c:	00 97       	sbiw	r24, 0x00	; 0
 61e:	59 f4       	brne	.+22     	; 0x636 <__vector_7+0x68>
	return (completed == 1);
}

void inline stopPulseWrite()
{
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // stop data clock
 620:	e1 e7       	ldi	r30, 0x71	; 113
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	88 7f       	andi	r24, 0xF8	; 248
 628:	80 83       	st	Z, r24
	TCCR0A &= ~(1 << COM0A0); //disconnect from pin
 62a:	de 98       	cbi	0x1b, 6	; 27
	TCCR0B &= ~(1 << CS00); //stop carrier clock
 62c:	d0 98       	cbi	0x1a, 0	; 26
	completed = 1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 04 01 	sts	0x0104, r24
 634:	04 c0       	rjmp	.+8      	; 0x63e <__vector_7+0x70>
}

void inline setPulseLength()
{
	OCR1A = pulses_out[pulsePosition]; // set timer TOP
 636:	90 93 6d 00 	sts	0x006D, r25
 63a:	80 93 6c 00 	sts	0x006C, r24
		stopPulseWrite();
		return;
	}

	setPulseLength();
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
